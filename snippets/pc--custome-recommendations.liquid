<!-- CSS -->
<style>
.recommendations-grid {
  display: flex;
}

.recommendation-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.add-to-cart-btn.hidden {
  display: none;
}


  /*  */
.cart-item-recommendations {
  padding-left: 20px;
  padding-bottom: 95px;
  /* padding-top: 20px;
  border-top: 1px solid #EEEEEE; */
}
.cart-item-recommendations .recommendation-image-div img {
  height: 180px;
  width: 100%;
  object-fit: cover;
}
.cart-item-recommendations .recommendation-image-div {
  margin-bottom: 8px;
}
.cart-item-recommendations .recommendation-parent-div .recommendation_product_title {
  font-size: 14px;
  letter-spacing: 0;
  color: var(--main-body-black-color);
  line-height: 1.429;
  margin: 0;
  font-family: var(--font-family-Bold) !important;
  height: 40px;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.cart-item-recommendations .recommendation-parent-div  .recomendition_product_rate {
  font-size: 14px;
  letter-spacing: 0;
  color: var(--main-body-black-color);
  line-height: 1.429;
  font-family: var(--font-family-regular) !important;
  display: block;
}
.cart-item-recommendations .recommendation-parent-div select {
  border: 1px solid #10100F;
}
.cart-item-recommendations .recommendation-parent-div select {
  border: 0;
  font-family: var(--font-family-Bold) !important;
  font-size: 12px;
  text-transform: uppercase;
  letter-spacing: 0;
  min-height: auto;
  min-width: auto;
  padding: 11px 43px 10px 20px;
  appearance: none;
  display: flex;
  box-shadow: unset;
  text-align: center;
  background: transparent;
  line-height: 1.429;
  cursor: pointer;
  z-index: 2;
}  
span.svg_wrap {
  position: absolute;
  right: 20px;
  top: 50%;
  transform: translateY(-50%);
  z-index: 0;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap button {
  border: 0;
  background: transparent;
  font-size: 12px;
  letter-spacing: 0;
  line-height: 1.429;
  color: var(--main-body-white-color);
  font-family: var(--font-family-regular) !important;
  text-transform: uppercase;
  padding: 0;
  cursor: pointer;
}
span.arrow_variants {
  color: var(--main-body-white-color);
  margin-left: 6px;
  margin-right: 6px;
  line-height: 1;
}
.cart-item-recommendations .recommendation-parent-div select option {
  padding: 0;
  text-align: center;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants span.svg_wrap svg path {
  stroke: #fff;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants select {
  color: var(--main-body-white-color);
  padding: 0;
  padding-right: 16px;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants {
  background: #10100F;
  padding: 10px 20px 6px;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap {
  display: inline-flex;
  border: 1px solid #10100F;
  background: #fff;
  margin-top: 12px;
  position: relative;
}
.cart-item-recommendations .recommendation-parent-div select:focus ~ span svg {
  transform: rotate(180deg);
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap select option {
  color: var(--main-body-black-color);
  font-family: var(--font-family-regular) !important;
}
.cart-item-recommendations h4 {
    margin: 0 0 12px;
    color: var(--main-body-black-color);
    line-height: 1.572;
    font-size: 14px;
}
.cart-item-recommendations .recommendation-item {
    padding-bottom: 4px;
}


.variant-dropdown {
  /* position: relative; */
  display: inline-block;
}
.variant-toggle {
  padding: 8px 12px;
  border: 1px solid #ccc;
  background: white;
  cursor: pointer;
}
.custom-variant-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: none;
  border: 1px solid #ccc;
  position: absolute;
  background: white;
  width: calc(100% + 2px);
  z-index: 99;
  bottom: -1px;
  box-shadow: inset  0px 8px 8px -4px #0A0D1208, 0px -10px 24px -4px #0A0D1214;
  min-height: 150px;
  overflow-y: auto;
  text-align: center;
  min-width: 100px;
  right: -1px;
}
.custom-variant-list.open {
  display: block;
}
.custom-variant-list li {
  padding: 8px 12px;
  cursor: pointer;
  font-size: 14px;
  color: var(--main-body-black-color);
  font-family: var(--font-family-regular) !important;
  line-height: 1.429;
}
.custom-variant-list li:hover {
  background: #f3f3f3;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap .variant-dropdown button {
    border: 0;
    font-family: var(--font-family-Bold) !important;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 0;
    min-height: auto;
    min-width: auto;
    padding: 11px 20px 7px 20px;
    appearance: none;
    display: flex;
    box-shadow: unset;
    text-align: center;
    background: transparent;
    line-height: 1.429;
    cursor: pointer;
    z-index: 2;
    color: var(--main-body-black-color);
    align-items: center;
    gap: 13px;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap .variant-dropdown button svg {
    margin-top: -3px;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants button.variant-toggle {
    color: var(--main-body-white-color);
    padding: 0;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap .variant-dropdown button:after {
    content: '';
    background-image: url('data:image/svg+xml,<svg width="11" height="7" viewBox="0 0 11 7" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.48483 1.24264L5.24219 5.48528L0.999547 1.24264" stroke="%2310100F" stroke-width="1.5"/></svg>');
    width: 11px;
    height: 7px;
    display: flex;
    background-size: contain;
    background-repeat: no-repeat;
    top: -1px;
    position: relative;
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants .variant-dropdown button:after{
  background-image: url('data:image/svg+xml,<svg width="11" height="7" viewBox="0 0 11 7" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.48483 1.24264L5.24219 5.48528L0.999547 1.24264" stroke="%23ffffff" stroke-width="1.5"/></svg>');
}
.cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants.sold_disabled {
    /* opacity: 0.3; */
    background: rgb(16 16 15 / 25%);
    border-color: rgb(16 16 15 / 25%);
}
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap button.disabled {
    cursor: no-drop;
}
.cart-item-recommendations.drawer__recommendations_empty {
    display: none;
}

  
@media screen and (max-width: 767px){
  
  .cart-item-recommendations .recommendation-parent-div .recommendation_product_title {
    font-size: 12px;
    height: auto;
    -webkit-line-clamp: 1;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants {
    padding: 10px 22px 6px 12px;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap {
    margin-top: 8px;
  }
  .cart-item-recommendations .recommendation-parent-div .recomendition_product_rate, .cart-drawer .common_btn,
  .cart-drawer .drawer__cart-items-wrapper .cart-item__quantity-wrapper cart-remove-button button{
    font-size: 12px;
  }
  .cart-item-recommendations .recommendation-parent-div select {
    padding: 8px 30px 4px 12px;
  }
  .cart-item-recommendations {
    padding-left: 10px;
    padding-bottom: 45px;
  }
  span.svg_wrap {
    right: 10px;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants select {
    padding-right: 2px;
  }
  .cart-item-recommendations .recommendation-image-div img {
    height: 120px;
  }  
  .cart-item-recommendations.drawer__recommendations_empty {
    display: none;
  }
  span.arrow_variants {
    margin-left: 3px;
    margin-right: 3px;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.sold_disabled .variant-dropdown button {
    padding:0;
    gap: 5px;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants.sold_disabled {
    padding: 5.5px 12px 3.5px 12px;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants {
    padding: 5.5px 12px 3.5px 12px;
    display: inline-flex;
    align-items: center;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.sold_disabled button,
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.sold_disabled .variant-dropdown button{
    font-size: 9px;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap button,
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap .variant-dropdown button{
    font-size: 12px;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap .variant-dropdown button {
    padding: 7px 10px 4px 10px;
    gap: 8px;
  }
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap .variant-dropdown button:after {
    width: 8px;
    height: 6px;
  }

  /* new feedback css on responsive */
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants {
    padding: 5.5px 6px 3.5px 6px;
  }
  .custom-variant-list li {
    padding: 8px 20px;
    font-size: 12px;
  }
  .custom-variant-list {
    width: auto;
    min-width: auto;
  }
}

@media screen and (max-width: 575px){
  .cart-item-recommendations .recommendation-parent-div .variant-action-wrap.selected_variants {
    padding: 5.5px 6px 3.5px 6px;
  }
}

  
</style>


<!-- Recommendations HTML -->
<tr class="cart-item-recommendations">
  <td colspan="4">
    <div class="cart-item-recommendations drawer__{%- if cart == empty -%}recommendations_empty {% endif %}">
      <h4>{{ settings.cart_drawer_recommendations_heading }}</h4>
      <div id="recommendation-container" class="recommendations-grid recommendations_grid_slide"></div>
    </div>
  </td>
</tr>

<script>
  window.ShopCurrency = {
   currency: "{{ cart.currency.iso_code }}",
    symbol: "{{ cart.currency.symbol }}"
  };
</script>
<script>
 window.CartLabels = {
  unavailable: "{{ 'products.product.unavailable' | t }}",
  soldOut: "{{ 'products.product.sold_out' | t }}",
  addToCart: "{{ 'products.product.add_to_cart' | t }}",
  selectSize: "{{ 'products.product.select_size' | t }}",
};
</script>
<script>
 window.MobileCartLabels = {
  RecomandedSelectSize: "{{ 'products.product.recomanded_select_size' | t }}",
  RecomandedSelectAddCart: "{{ 'products.product.recomanded_select_add_cart' | t }}",
};
</script>


<!-- Main Script -->
<script>
 
  function getLabel(labelName) {
    if (window.innerWidth <= 767) {
      return window.MobileCartLabels && window.MobileCartLabels[labelName] ? window.MobileCartLabels[labelName] : '';
    } else {
      return window.CartLabels && window.CartLabels[labelName] ? window.CartLabels[labelName] : '';
    }
  }
  function loadRecommendationsFromFirstProduct(index = 0) {
  fetch('/cart.js')
    .then(response => response.json())
    .then(cart => {
      if (!cart.items || cart.items.length <= index) return;

      const productId = cart.items[index].product_id;
      return fetch(`/recommendations/products.json?product_id=${productId}`)
        .then(response => response.ok ? response.json() : null)
        .then(data => {
          if (!data || !data.products || data.products.length === 0) {
            return loadRecommendationsFromFirstProduct(index + 1);
          }

          const container = document.querySelector('#recommendation-container');
          if (!container) return;

          container.innerHTML = "";

          if (typeof Shopify === 'undefined') {
            window.Shopify = {};
          }

          Shopify.formatMoney = function(cents, format = "{{amount_with_currency}}") {
            if (typeof cents === "string") {
              cents = cents.replace(".", "");
            }
            cents = parseInt(cents, 10);
            if (isNaN(cents)) return '';

            const amount = (cents / 100).toFixed(2);
            const currencyCode = window.ShopCurrency?.currency || Shopify?.currency?.active;
            const currencySymbol = window.ShopCurrency?.symbol || Shopify?.currency?.symbol;

            const formats = {
              "{{amount}}": `${currencySymbol}${amount}`,
              "{{amount_with_currency}}": `${currencySymbol}${amount} ${currencyCode}`,
              "{{amount_no_decimals}}": `${currencySymbol}${Math.round(amount)}`,
              "{{amount_no_decimals_with_currency}}": `${currencySymbol}${Math.round(amount)} ${currencyCode}`
            };
            return formats[format] || `${currencySymbol}${amount}`;
          };

          data.products.forEach(product => {
            const div = document.createElement('div');
            const price = product.price || 0;
            const formattedPrice = Shopify.formatMoney(product.price, "{{amount_with_currency}}");

            // Mobile view hoy to 'Add' label else 'Add to Cart'
           

             let buttonLabel = '';
            if(window.innerWidth <= 767) {
              buttonLabel = getLabel('RecomandedSelectAddCart');
            } else {
              buttonLabel = getLabel('addToCart');
            }
            
            if (!product.variants || product.variants.length === 0) {
              buttonLabel = getLabel('unavailable');
            } else if (!product.variants[0].available) {
              buttonLabel = getLabel('soldOut');
            }

            let variantHTML = '';
            if (product.variants.length > 1) {
             let options = `<ul class="custom-variant-list cart_variant_list">`;
              product.variants.forEach(variant => {
                const formattedVariantPrice = Shopify.formatMoney(variant.price, "{{amount_with_currency}}");
                const isDisabled = !variant.available ? 'disabled_variant' : '';
                
                options += `<li 
                  class="${isDisabled}"
                  data-variant-id="${variant.id}" 
                  data-label="${variant.option1}" 
                  data-varint-price="${formattedVariantPrice}">
                  ${variant.option1}
                </li>`;
              });
              options += `</ul>`;


              variantHTML = `
                <div class="variant-action-wrap cart_variants_action">
                  <button class="add-to-cart-btn hidden" data-variant-id="">${buttonLabel} - ${getLabel('selectSize') || getLabel('RecomandedSelectSize')}</button>
                  <span class="hidden arrow_variants">-</span>
                  <div class="variant-dropdown cart_variant_drop">
                    <button class="variant-toggle variant_btn">
                      ${getLabel('selectSize') || getLabel('RecomandedSelectSize')}
                    </button>
                    ${options}
                  </div>
                </div>
              `;
             
            } else {
              variantHTML = `
                <button class="add-to-cart-btn" data-variant-id="${product.variants[0].id}">
                  ${buttonLabel}
                </button>
              `;
            }

            div.className = 'recommendation-item';
            div.setAttribute('data-variants', JSON.stringify(product.variants));
            div.innerHTML = `
              <div class="recommendation-parent-div recommendation_items">
                <a href="${product.url}">
                  <div class="recommendation-image-div">
                    <img src="${product.featured_image}" alt="${product.title}">
                  </div>
                  <p class="recommendation_product_title">${product.title}</p>
                </a>
                <span class="recomendition_product_rate">${formattedPrice}</span>
                ${variantHTML}
              </div>
            `;

            container.appendChild(div);
          });

          setTimeout(() => {
            const $slider = $('.recommendations_grid_slide');
            $('.recommendations_grid_slide').addClass('owl-carousel');
            if ($slider.hasClass('owl-loaded')) $slider.trigger('destroy.owl.carousel');
            $slider.owlCarousel({
              loop: true,
              margin: 20,
              autoplay: false,
              nav: false,
              dots: false,
              responsive: {
                0: {
                  items: 2.4,
                  margin: 10,
                },
                768: {
                  items: 2.4,
                  margin: 20,
                }
              }
            });
          }, 100);
        });
    })
    .catch(console.error);
}


  function addToCart(variantId) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
      body: JSON.stringify({ id: variantId, quantity: 1 })
    })
    .then(res => res.json())
    .then(() => {
      fetch(window.location.href)
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          const updatedDrawer = doc.querySelector('#CartDrawer');
          const currentDrawer = document.querySelector('#CartDrawer');
          if (updatedDrawer && currentDrawer) {
            currentDrawer.innerHTML = updatedDrawer.innerHTML;
          }

          const updatedBubble = doc.querySelector('#cart-icon-bubble');
          const currentBubble = document.querySelector('#cart-icon-bubble');
          if (updatedBubble && currentBubble) {
            currentBubble.innerHTML = updatedBubble.innerHTML;
          }

          const drawer = document.querySelector('.cart-drawer');
          if (drawer && !drawer.classList.contains('is-open')) {
            drawer.classList.add('is-open');
          }

          attachOutsideClickListener();
        });

      setTimeout(loadRecommendationsFromFirstProduct, 500);
    })
    .catch(err => console.error("Add to cart failed:", err));
  }

  function attachOutsideClickListener() {
    if (!$("#CartDrawer-Overlay").data("event-added")) {
      $("#CartDrawer-Overlay").on("click", function (evt) {
        var container = $("cart-drawer");
        if (!$(evt.target).closest("cart-drawer").length) {
          container.removeClass("active");
          $("body").removeClass("overflow-hidden");
        } else {
          $("body").removeClass("overflow-hidden");
          container.removeClass("active");
        }
        $("#CartDrawer-Overlay").data("event-added", true);
      });
      $("#CartDrawer-Overlay").data("event-added", true);
    }
  }

  // Size variant select
 document.addEventListener('click', function (e) {
  // Open/Close dropdown
   if (e.target.classList.contains('variant_btn')) {
    e.preventDefault();
    
      // Close all open dropdowns first
      document.querySelectorAll('.cart_variant_list.open').forEach(list => {
        list.classList.remove('open');
      });
    
      // Then open the clicked one
      const dropdownList = e.target.nextElementSibling;
      dropdownList.classList.toggle('open');
    }
  document.querySelectorAll('.cart_variant_list.open').forEach(dropdown => {
    if (!dropdown.closest('.cart_variant_drop').contains(e.target)) {
      dropdown.classList.remove('open');
    }
  });

  // Selecting a variant
  if (e.target.closest('.cart_variant_list li')) {
    const li = e.target.closest('li');
    const variantId = li.dataset.variantId;
    const label = li.dataset.label;
    const variantPrice = li.dataset.varintPrice;

    const dropdown = li.closest('.cart_variant_drop');
    const toggleBtn = dropdown.querySelector('.variant_btn');
    toggleBtn.innerHTML = label;


     // Add class to parent
    const variantWrap = toggleBtn.closest('.cart_variants_action');
    variantWrap.classList.add('selected_variants');

    const button = li.closest('.cart_variants_action').querySelector('.add-to-cart-btn');
    console.log(button,'button');
    const arrows = li.closest('.cart_variants_action').querySelector('.arrow_variants');
    arrows.classList.remove('hidden');
    button.dataset.variantId = variantId;


    const parentDiv = li.closest('.recommendation_items').parentElement;
      const productVariants = JSON.parse(parentDiv.dataset.variants || '[]');
      const selectedVariant = productVariants.find(v => v.id == variantId);
      
      if (selectedVariant && !selectedVariant.available) {
          button.textContent = window.CartLabels.soldOut;
          variantWrap.classList.add('sold_disabled');  // your disabled class
          button.classList.add('disabled');  // your disabled class
          button.disabled = true;
      } else {   
        if(window.innerWidth <= 767) {           
            // button.textContent = window.MobileCartLabels.RecomandedSelectAddCart;
            button.textContent = `${window.MobileCartLabels.RecomandedSelectAddCart} - ${label}`;
          } else {
           
            // button.textContent = window.CartLabels.addToCart;
          button.textContent = `${window.CartLabels.addToCart} - ${label}`;
          }
          
          variantWrap.classList.remove('sold_disabled');
          button.classList.remove('disabled');
          button.disabled = false;
      }
      
      button.classList.remove('hidden');


    const priceSpan = li.closest('.recommendation_items').querySelector('.recomendition_product_rate');
    if (priceSpan) priceSpan.textContent = ` ${variantPrice}`;

    dropdown.querySelector('.cart_variant_list').classList.remove('open'); // Close list
  }
});


  // Add to cart button click
  document.addEventListener('click', function (e) {
    if (e.target.classList.contains('add-to-cart-btn')) {
      const variantId = e.target.dataset.variantId;
      if (variantId) {
        addToCart(variantId);
      }
       setTimeout(loadRecommendationsFromFirstProduct, 500);
    }
  });

document.addEventListener("DOMContentLoaded", () => {
  loadRecommendationsFromFirstProduct();
  attachOutsideClickListener();

  document.addEventListener("click", function (e) {
    // Catch all relevant click events
    const submitBtn = e.target.closest(".product-form__submit");
    const removeBtn = e.target.closest(".cart-remove-button");
    const quantityBtn = e.target.closest(".quantity__button");
    const variantBtn = e.target.closest(".variant-button");

    if (submitBtn) {
      console.log("Submit button clicked ✅");
      setTimeout(loadRecommendationsFromFirstProduct, 1200);
    }

    if (removeBtn || quantityBtn || variantBtn) {
      setTimeout(loadRecommendationsFromFirstProduct, 500);
    }

  });
});
  $(document).on("click", ".add-to-cart-btn-com", function() {
    console.log("btn_click");
    setTimeout(loadRecommendationsFromFirstProduct, 2500);
});


</script>





